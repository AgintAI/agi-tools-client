{
  "openapi": "3.1.0",
  "info": {
    "title": "Docker Builder API",
    "description": "Combined API for all Docker Builder commands",
    "version": "1.0.0"
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Health check endpoint for ALB.\n\nChecks:\n1. If the service is running\n2. If the local git commit matches the remote commit",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/dagify/compose": {
      "post": {
        "tags": [
          "dagify"
        ],
        "summary": "Dagify CLI Interface",
        "description": "Creates a new workflow from a description, supporting different types of workflow representations.\n\n    Examples:\n        1. Create a new DAG from a description:\n           $ dagify compose \"Extract data from API, transform, and load to database\"\n\n        2. Create a DAG using an existing workflow as reference:\n           $ dagify compose \"Create CI pipeline\" reference_workflow.json\n\n        3. Create a DAG using piped input as reference:\n           $ cat reference_workflow.json | dagify compose \"Optimize this workflow\" -\n\n        4. Create a DAG from a database schema:\n           $ dagify compose \"Generate ETL pipeline\" \"postgres://user:pass@localhost:5432/db\"",
        "operationId": "compose_endpoint_dagify_compose_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DagifyComposeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Compose Endpoint Dagify Compose Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dagify/refine": {
      "post": {
        "tags": [
          "dagify"
        ],
        "summary": "Dagify CLI Interface",
        "description": "Refines an existing workflow by improving metadata, details, instructions and tags.\n    Can also apply agent tags to enable agentic execution of workflow steps.\n\n    Examples:\n        1. Refine a DAG by improving metadata and relationships:\n           $ dagify refine \"Enhance step dependencies\" agilink://ci_pipeline\n\n        2. Apply agent tags to enable AI execution in an ETL DAG:\n           $ dagify refine \"Make AI-driven transformations agentic\" etl_dag.json --agentify\n\n        3. Use piped input for DAG refinement:\n           $ cat workflow_dag.json | dagify refine \"Optimize parallel execution\" -",
        "operationId": "refine_endpoint_dagify_refine_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DagifyRefineRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Refine Endpoint Dagify Refine Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dagify/resolve": {
      "post": {
        "tags": [
          "dagify"
        ],
        "summary": "Dagify CLI Interface",
        "description": "Executes one pass of AI-assisted refinement to replace agent-tagged workflow\n    steps with progressively more concrete instructions and generated code, while\n    respecting a defined type hierarchy.",
        "operationId": "resolve_endpoint_dagify_resolve_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DagifyResolveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Resolve Endpoint Dagify Resolve Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dagify/compile": {
      "post": {
        "tags": [
          "dagify"
        ],
        "summary": "Dagify CLI Interface",
        "description": "Compiles a DAG into an executable format by fully implementing functions where\n    possible, resolving AI-shims, and generating structured output files.",
        "operationId": "compile_endpoint_dagify_compile_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DagifyCompileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Compile Endpoint Dagify Compile Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dagent/validate": {
      "post": {
        "tags": [
          "dagent"
        ],
        "summary": "Dagent CLI Interface",
        "description": "Validates the correctness of a DAG by checking its structure, dependencies, and execution feasibility.\n\n    Performs validation checks including:\n    - DAG structural integrity (node/edge consistency, cycles)\n    - Execution compatibility (AI-executable steps, missing dependencies)\n    - Schema correctness for external data sources",
        "operationId": "validate_endpoint_dagent_validate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DagentValidateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Validate Endpoint Dagent Validate Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dagent/optimize": {
      "post": {
        "tags": [
          "dagent"
        ],
        "summary": "Dagent CLI Interface",
        "description": "Optimizes AI-driven DAG nodes (e.g., prompts, spec stages) to improve accuracy and reliability\n    by tuning them against a provided test dataset.\n\n    Optimization can adjust:\n    - Prompt structure\n    - Spec-level AI-generated values\n    - Other AI-dependent nodes in the DAG",
        "operationId": "optimize_endpoint_dagent_optimize_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DagentOptimizeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Optimize Endpoint Dagent Optimize Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dagent/execute": {
      "post": {
        "tags": [
          "dagent"
        ],
        "summary": "Dagent CLI Interface",
        "description": "Execute a DAG plan with structured input and AI-assisted processing.",
        "operationId": "execute_endpoint_dagent_execute_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DagentExecuteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Execute Endpoint Dagent Execute Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dagent/interpret": {
      "post": {
        "tags": [
          "dagent"
        ],
        "summary": "Dagent CLI Interface",
        "description": "Generates a DAG plan dynamically and executes it immediately.",
        "operationId": "interpret_endpoint_dagent_interpret_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DagentInterpretRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Interpret Endpoint Dagent Interpret Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dagent/synthesize": {
      "post": {
        "tags": [
          "dagent"
        ],
        "summary": "Dagent CLI Interface",
        "description": "Generates a DAG plan, compiles it to executable code, and executes it.",
        "operationId": "synthesize_endpoint_dagent_synthesize_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DagentSynthesizeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Synthesize Endpoint Dagent Synthesize Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/schemagin/generate": {
      "post": {
        "tags": [
          "schemagin"
        ],
        "summary": "Schemagin CLI Interface",
        "description": "Generate a database schema using natural language.\n\n    Examples:\n        schemagin \"Schema for an e-commerce platform\"\n        schemagin \"Extend this schema to support multi-tenancy\" \"Users table must include a tenant_id column\"\n        schemagin \"Schema for a project management tool\" -o json\n        schemagin \"Generate a database for an inventory system\" -v dot -v dbml --display-ascii\n        echo \"Generate a database schema for a medical records system\" | schemagin -o sql\n        echo \"Include an audit log table\" | schemagin \"Schema for a financial system\" -o json\n        schemagin \"Improve this schema with better indexing\" < schema.yaml",
        "operationId": "generate_endpoint_schemagin_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaginGenerateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Generate Endpoint Schemagin Generate Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/datagin/ingest": {
      "post": {
        "tags": [
          "datagin"
        ],
        "summary": "Datagin CLI Interface",
        "description": "Extract and structure data from an input source.",
        "operationId": "ingest_endpoint_datagin_ingest_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataginIngestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Ingest Endpoint Datagin Ingest Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/datagin/synthesize": {
      "post": {
        "tags": [
          "datagin"
        ],
        "summary": "Datagin CLI Interface",
        "description": "Generate synthetic data based on schema and prompt.",
        "operationId": "synthesize_endpoint_datagin_synthesize_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataginSynthesizeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Synthesize Endpoint Datagin Synthesize Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/datagin/transform": {
      "post": {
        "tags": [
          "datagin"
        ],
        "summary": "Datagin CLI Interface",
        "description": "Transform structured data between schemas.",
        "operationId": "transform_endpoint_datagin_transform_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataginTransformRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Transform Endpoint Datagin Transform Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pagint/generate": {
      "post": {
        "tags": [
          "pagint"
        ],
        "summary": "Pagint CLI Interface",
        "description": "Generate structured data using natural language descriptions.",
        "operationId": "generate_endpoint_pagint_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PagintGenerateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Generate Endpoint Pagint Generate Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pagint/augment": {
      "post": {
        "tags": [
          "pagint"
        ],
        "summary": "Pagint CLI Interface",
        "description": "Enhance existing data using natural language descriptions.",
        "operationId": "augment_endpoint_pagint_augment_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PagintAugmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Augment Endpoint Pagint Augment Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DagentExecuteRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "plan": {
            "type": "string",
            "title": "plan",
            "description": "DAG plan to execute. Can be a JSON file, agilink URI, or JSON string. Use '-' for stdin",
            "openapi_extra": {
              "x-cli-name": "plan",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "data": {
            "type": "string",
            "title": "data",
            "description": "External data to provide during execution",
            "openapi_extra": {
              "x-cli-name": "data",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "jit_mode": {
            "type": "string",
            "title": "jit_mode",
            "description": "Just-in-time (JIT) refinement mode",
            "openapi_extra": {
              "x-cli-name": "jit",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "tools": {
            "type": "string",
            "title": "tools",
            "description": "Comma-separated list of CLI tools available in the runtime",
            "openapi_extra": {
              "x-cli-name": "tools",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "tools_file": {
            "type": "string",
            "title": "tools_file",
            "description": "File containing a list of tools (one per line)",
            "openapi_extra": {
              "x-cli-name": "tools-file",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "output_format": {
            "type": "string",
            "title": "output_format",
            "description": "Format for execution results",
            "default": "json",
            "openapi_extra": {
              "x-cli-name": "output-format",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "output_dir": {
            "type": "string",
            "title": "output_dir",
            "description": "Directory to save execution results",
            "default": "./dagent/outputs/",
            "openapi_extra": {
              "x-cli-name": "output-dir",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "intelligence": {
            "type": "integer",
            "title": "intelligence",
            "description": "Intelligence level (0-100) to determine model selection",
            "default": 50,
            "openapi_extra": {
              "x-cli-name": "intelligence",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "seed": {
            "type": "integer",
            "title": "seed",
            "description": "Seed for deterministic execution",
            "openapi_extra": {
              "x-cli-name": "seed",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Enable verbose output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey"
        ],
        "title": "DagentExecuteRequest"
      },
      "DagentInterpretRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "task": {
            "type": "string",
            "title": "task",
            "description": "Natural language description of the DAG plan",
            "openapi_extra": {
              "x-cli-name": "task",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "data": {
            "type": "string",
            "title": "data",
            "description": "Input dataset or connection",
            "openapi_extra": {
              "x-cli-name": "data",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "recursive": {
            "type": "boolean",
            "title": "recursive",
            "description": "Allow recursively generated DAGs",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "recursive",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          },
          "jit_mode": {
            "type": "string",
            "title": "jit_mode",
            "description": "Just-in-time (JIT) refinement mode",
            "openapi_extra": {
              "x-cli-name": "jit",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "tools": {
            "type": "string",
            "title": "tools",
            "description": "Comma-separated list of CLI tools available in the runtime",
            "openapi_extra": {
              "x-cli-name": "tools",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "tools_file": {
            "type": "string",
            "title": "tools_file",
            "description": "File containing a list of tools (one per line)",
            "openapi_extra": {
              "x-cli-name": "tools-file",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "output_dir": {
            "type": "string",
            "title": "output_dir",
            "description": "Directory to save results",
            "default": "./dagent/outputs/",
            "openapi_extra": {
              "x-cli-name": "output-dir",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Enable verbose output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey"
        ],
        "title": "DagentInterpretRequest"
      },
      "DagentOptimizeRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "plan": {
            "type": "string",
            "title": "plan",
            "description": "The DAG plan to optimize. Can be a DAGify JSON file, agilink URI, or DAG JSON string (stdin)",
            "openapi_extra": {
              "x-cli-name": "plan",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "test_data": {
            "type": "string",
            "title": "test_data",
            "description": "The test dataset to optimize against. Can be a structured data file (JSON, CSV, Parquet) or agilink URI",
            "openapi_extra": {
              "x-cli-name": "test_data",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "metric": {
            "type": "string",
            "title": "metric",
            "description": "Optimization metric to use",
            "default": "accuracy",
            "openapi_extra": {
              "x-cli-name": "metric",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "max_iterations": {
            "type": "integer",
            "title": "max_iterations",
            "description": "Maximum optimization passes",
            "default": 10,
            "openapi_extra": {
              "x-cli-name": "max-iterations",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "output_dir": {
            "type": "string",
            "title": "output_dir",
            "description": "Directory to save optimized DAG",
            "default": "./dagent/optimized/",
            "openapi_extra": {
              "x-cli-name": "output-dir",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Enable verbose output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey",
          "plan",
          "test_data"
        ],
        "title": "DagentOptimizeRequest"
      },
      "DagentSynthesizeRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "task": {
            "type": "string",
            "title": "task",
            "description": "Natural language description of the DAG",
            "openapi_extra": {
              "x-cli-name": "task",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "data": {
            "type": "string",
            "title": "data",
            "description": "Input dataset or connection",
            "openapi_extra": {
              "x-cli-name": "data",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "recursive": {
            "type": "boolean",
            "title": "recursive",
            "description": "Allow recursively generated DAGs",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "recursive",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          },
          "jit_mode": {
            "type": "string",
            "title": "jit_mode",
            "description": "Just-in-time (JIT) refinement mode",
            "openapi_extra": {
              "x-cli-name": "jit",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "tools": {
            "type": "string",
            "title": "tools",
            "description": "Comma-separated list of CLI tools available in the runtime",
            "openapi_extra": {
              "x-cli-name": "tools",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "tools_file": {
            "type": "string",
            "title": "tools_file",
            "description": "File containing a list of tools (one per line)",
            "openapi_extra": {
              "x-cli-name": "tools-file",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "runtime_dir": {
            "type": "string",
            "title": "runtime_dir",
            "description": "Directory where compiled code will be stored and registered",
            "default": "./dagent/runtime/",
            "openapi_extra": {
              "x-cli-name": "runtime-dir",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "output_dir": {
            "type": "string",
            "title": "output_dir",
            "description": "Directory to save execution results",
            "default": "./dagent/outputs/",
            "openapi_extra": {
              "x-cli-name": "output-dir",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Enable verbose output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey"
        ],
        "title": "DagentSynthesizeRequest"
      },
      "DagentValidateRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "plan": {
            "type": "string",
            "title": "plan",
            "description": "The DAG plan to validate. Can be a DAGify JSON file, agilink URI, or DAG JSON string (stdin)",
            "openapi_extra": {
              "x-cli-name": "plan",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "strict": {
            "type": "boolean",
            "title": "strict",
            "description": "Enable strict validation (fail on warnings)",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "strict",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Enable verbose output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey",
          "plan"
        ],
        "title": "DagentValidateRequest"
      },
      "DagifyCompileRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "prompt": {
            "type": "string",
            "title": "prompt",
            "description": "Description of how to compile the DAG",
            "openapi_extra": {
              "x-cli-name": "prompt",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "data": {
            "type": "string",
            "title": "data",
            "description": "The DAG to compile (file path, JSON string, or agilink URI)",
            "openapi_extra": {
              "x-cli-name": "data",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "type_floor": {
            "type": "string",
            "title": "type_floor",
            "description": "The minimum DAG type to compile down to",
            "default": "code",
            "openapi_extra": {
              "x-cli-name": "type-floor",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "intelligence": {
            "type": "integer",
            "title": "intelligence",
            "description": "Intelligence level (0-100) for AI-assisted function generation",
            "default": 50,
            "openapi_extra": {
              "x-cli-name": "intelligence",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "seed": {
            "type": "integer",
            "title": "seed",
            "description": "Seed for deterministic DAG compilation",
            "openapi_extra": {
              "x-cli-name": "seed",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "output_format": {
            "type": "string",
            "title": "output_format",
            "description": "Format for the compiled DAG",
            "default": "python",
            "openapi_extra": {
              "x-cli-name": "output-format",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "output_dir": {
            "type": "string",
            "title": "output_dir",
            "description": "Directory to save the compiled DAG and artifacts",
            "default": "./dagify/compiled/",
            "openapi_extra": {
              "x-cli-name": "output-dir",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "no_display": {
            "type": "boolean",
            "title": "no_display",
            "description": "Suppress ASCII visualization of the compiled DAG",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "no-display",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Enable verbose output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey"
        ],
        "title": "DagifyCompileRequest"
      },
      "DagifyComposeRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "prompt": {
            "type": "string",
            "title": "prompt",
            "description": "Description of the process or workflow to generate a DAG for",
            "openapi_extra": {
              "x-cli-name": "prompt",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "data": {
            "type": "string",
            "title": "data",
            "description": "DAG source - can be a JSON file, agilink URI, JSON string, or database connection. Use '-' for stdin",
            "openapi_extra": {
              "x-cli-name": "data",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "dag_type": {
            "type": "string",
            "title": "dag_type",
            "description": "Type of DAG to generate (plain, typed, spec, code-ai-shim, code)",
            "default": "plain",
            "openapi_extra": {
              "x-cli-name": "type",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "intelligence": {
            "type": "integer",
            "title": "intelligence",
            "description": "Intelligence level (0-100) for AI-assisted DAG generation",
            "default": 50,
            "openapi_extra": {
              "x-cli-name": "intelligence",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "seed": {
            "type": "integer",
            "title": "seed",
            "description": "Seed for deterministic workflow generation",
            "openapi_extra": {
              "x-cli-name": "seed",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "output_dir": {
            "type": "string",
            "title": "output_dir",
            "description": "Directory to save the generated DAG and visualization",
            "default": "./dagify/",
            "openapi_extra": {
              "x-cli-name": "output-dir",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "viz_format": {
            "type": "string",
            "title": "viz_format",
            "description": "Format for DAG visualization (dot, yaml, json, dbml, d2)",
            "default": "d2",
            "openapi_extra": {
              "x-cli-name": "viz-format",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "no_display": {
            "type": "boolean",
            "title": "no_display",
            "description": "Suppress ASCII visualization of the generated DAG",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "no-display",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Enable verbose output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey",
          "prompt"
        ],
        "title": "DagifyComposeRequest"
      },
      "DagifyRefineRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "prompt": {
            "type": "string",
            "title": "prompt",
            "description": "Description of the refinement to be applied",
            "openapi_extra": {
              "x-cli-name": "prompt",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "data": {
            "type": "string",
            "title": "data",
            "description": "DAG source - can be a JSON file, agilink URI, or JSON string. Use '-' for stdin",
            "openapi_extra": {
              "x-cli-name": "data",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "intelligence": {
            "type": "integer",
            "title": "intelligence",
            "description": "Intelligence level (0-100) for AI-assisted DAG generation",
            "default": 50,
            "openapi_extra": {
              "x-cli-name": "intelligence",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "seed": {
            "type": "integer",
            "title": "seed",
            "description": "Seed for deterministic workflow generation",
            "openapi_extra": {
              "x-cli-name": "seed",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "agentify": {
            "type": "boolean",
            "title": "agentify",
            "description": "Apply agent tags to enable agentic execution of applicable workflow steps",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "agentify",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          },
          "viz_format": {
            "type": "string",
            "title": "viz_format",
            "description": "Format of the DAG output (dot, yaml, json, dbml, d2)",
            "default": "d2",
            "openapi_extra": {
              "x-cli-name": "viz-format",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "output_dir": {
            "type": "string",
            "title": "output_dir",
            "description": "Directory to save the refined DAG and viz",
            "default": "./dagify/",
            "openapi_extra": {
              "x-cli-name": "output-dir",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "no_display": {
            "type": "boolean",
            "title": "no_display",
            "description": "Suppress ASCII visualization of the generated DAG",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "no-display",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Enable verbose output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey",
          "prompt"
        ],
        "title": "DagifyRefineRequest"
      },
      "DagifyResolveRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "prompt": {
            "type": "string",
            "title": "prompt",
            "description": "Description of how to resolve agent tags",
            "openapi_extra": {
              "x-cli-name": "prompt",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "data": {
            "type": "string",
            "title": "data",
            "description": "The DAG to resolve (file path, JSON string, or agilink URI)",
            "openapi_extra": {
              "x-cli-name": "data",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "type_floor": {
            "type": "string",
            "title": "type_floor",
            "description": "The minimum DAG type to resolve down to",
            "default": "spec",
            "openapi_extra": {
              "x-cli-name": "type-floor",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "intelligence": {
            "type": "integer",
            "title": "intelligence",
            "description": "Intelligence level (0-100) for AI-assisted DAG generation",
            "default": 50,
            "openapi_extra": {
              "x-cli-name": "intelligence",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "seed": {
            "type": "integer",
            "title": "seed",
            "description": "Seed for deterministic workflow generation",
            "openapi_extra": {
              "x-cli-name": "seed",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "viz_format": {
            "type": "string",
            "title": "viz_format",
            "description": "Format of the DAG output (dot, yaml, json, dbml, d2)",
            "default": "d2",
            "openapi_extra": {
              "x-cli-name": "viz-format",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "output_dir": {
            "type": "string",
            "title": "output_dir",
            "description": "Directory to save the refined DAG and viz",
            "default": "./dagify/",
            "openapi_extra": {
              "x-cli-name": "output-dir",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "no_display": {
            "type": "boolean",
            "title": "no_display",
            "description": "Suppress ASCII visualization of the generated DAG",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "no-display",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Enable verbose output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey",
          "prompt",
          "data"
        ],
        "title": "DagifyResolveRequest"
      },
      "DataginIngestRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "prompt": {
            "type": "string",
            "title": "prompt",
            "description": "Natural language description of the data extraction task",
            "openapi_extra": {
              "x-cli-name": "prompt",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "input": {
            "type": "string",
            "title": "input",
            "description": "Input source (text, file, or agilink URI)",
            "openapi_extra": {
              "x-cli-name": "input",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "output_agilink": {
            "type": "string",
            "title": "output_agilink",
            "description": "Agilink URI where structured data will be written",
            "openapi_extra": {
              "x-cli-name": "output-agilink",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": true
            }
          },
          "source_agilink": {
            "type": "string",
            "title": "source_agilink",
            "description": "Alias for INPUT if using an agilink URI",
            "openapi_extra": {
              "x-cli-name": "source-agilink",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "start_page": {
            "type": "integer",
            "title": "start_page",
            "description": "Starting page for PDF processing",
            "default": 0,
            "openapi_extra": {
              "x-cli-name": "start-page",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "rows": {
            "type": "integer",
            "title": "rows",
            "description": "Number of rows to transfer if input is a large dataset",
            "openapi_extra": {
              "x-cli-name": "rows",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Show detailed processing output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey",
          "prompt",
          "input",
          "output_agilink"
        ],
        "title": "DataginIngestRequest"
      },
      "DataginSynthesizeRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "prompt": {
            "type": "string",
            "title": "prompt",
            "description": "Natural language description of data to generate",
            "openapi_extra": {
              "x-cli-name": "prompt",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "schema": {
            "type": "string",
            "title": "schema",
            "description": "Schema file path or inline YAML/JSON",
            "openapi_extra": {
              "x-cli-name": "schema",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "output_agilink": {
            "type": "string",
            "title": "output_agilink",
            "description": "Agilink URI where generated data will be stored",
            "openapi_extra": {
              "x-cli-name": "output-agilink",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": true
            }
          },
          "rows": {
            "type": "integer",
            "title": "rows",
            "description": "Number of rows to generate",
            "default": 10,
            "openapi_extra": {
              "x-cli-name": "rows",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Show detailed processing output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey",
          "prompt",
          "schema",
          "output_agilink"
        ],
        "title": "DataginSynthesizeRequest"
      },
      "DataginTransformRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "prompt": {
            "type": "string",
            "title": "prompt",
            "description": "Natural language description of the transformation",
            "openapi_extra": {
              "x-cli-name": "prompt",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "input": {
            "type": "string",
            "title": "input",
            "description": "Input source (structured file or directory)",
            "openapi_extra": {
              "x-cli-name": "input",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "output_agilink": {
            "type": "string",
            "title": "output_agilink",
            "description": "Agilink URI where transformed data will be stored",
            "openapi_extra": {
              "x-cli-name": "output_agilink",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Show detailed processing output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey",
          "prompt",
          "input",
          "output_agilink"
        ],
        "title": "DataginTransformRequest"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "PagintAugmentRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "task": {
            "type": "string",
            "title": "task",
            "description": "Task description",
            "openapi_extra": {
              "x-cli-name": "task",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "target_db": {
            "type": "string",
            "title": "target_db",
            "description": "Target database connection string",
            "openapi_extra": {
              "x-cli-name": "target_db",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "intelligence": {
            "type": "integer",
            "title": "intelligence",
            "description": "Intelligence level (0-100) - currently not used",
            "default": 50,
            "openapi_extra": {
              "x-cli-name": "intelligence",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "no_display": {
            "type": "boolean",
            "title": "no_display",
            "description": "Suppress ASCII visualization of augmented data",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "no-display",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Enable verbose output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey",
          "task"
        ],
        "title": "PagintAugmentRequest"
      },
      "PagintGenerateRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "task": {
            "type": "string",
            "title": "task",
            "description": "Task description",
            "openapi_extra": {
              "x-cli-name": "task",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": true
            }
          },
          "schema": {
            "type": "string",
            "title": "schema",
            "description": "Database connection string",
            "openapi_extra": {
              "x-cli-name": "schema",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "rows": {
            "type": "integer",
            "title": "rows",
            "description": "Number of rows to generate",
            "default": 20,
            "openapi_extra": {
              "x-cli-name": "rows",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "intelligence": {
            "type": "integer",
            "title": "intelligence",
            "description": "Intelligence level (0-100) - currently not used",
            "default": 50,
            "openapi_extra": {
              "x-cli-name": "intelligence",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "no_display": {
            "type": "boolean",
            "title": "no_display",
            "description": "Suppress ASCII visualization of generated data",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "no-display",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Enable verbose output",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey",
          "task"
        ],
        "title": "PagintGenerateRequest"
      },
      "SchemaginGenerateRequest": {
        "properties": {
          "agint_apikey": {
            "type": "string",
            "title": "Agint Apikey",
            "description": "API Key for authentication"
          },
          "prompt": {
            "type": "string",
            "title": "prompt",
            "description": "Natural language description of the schema to generate.",
            "openapi_extra": {
              "x-cli-name": "prompt",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "data": {
            "type": "string",
            "title": "data",
            "description": "Optional structured schema definition or unstructured context. Can be provided via stdin.",
            "openapi_extra": {
              "x-cli-name": "data",
              "x-is-argument": true,
              "x-is-flag": false,
              "x-is-option": false,
              "x-required": false
            }
          },
          "intelligence": {
            "type": "integer",
            "title": "intelligence",
            "description": "Intelligence level. 0-100",
            "default": 0,
            "openapi_extra": {
              "x-cli-name": "intelligence",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "seed": {
            "type": "integer",
            "title": "seed",
            "description": "Set a seed value for deterministic schema generation.",
            "openapi_extra": {
              "x-cli-name": "seed",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "output_format": {
            "type": "string",
            "title": "output_format",
            "description": "Output format for the schema.",
            "default": "yaml",
            "openapi_extra": {
              "x-cli-name": "output-format",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "visualizations": {
            "type": "string",
            "title": "visualizations",
            "description": "Generate visualizations in specified formats. Can be specified multiple times.",
            "openapi_extra": {
              "x-cli-name": "visualization",
              "x-is-argument": false,
              "x-is-flag": false,
              "x-is-option": true,
              "x-required": false
            }
          },
          "display_ascii": {
            "type": "boolean",
            "title": "display_ascii",
            "description": "Display the generated schema in an ASCII table format.",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "display-ascii",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          },
          "no_foreign_keys": {
            "type": "boolean",
            "title": "no_foreign_keys",
            "description": "Disable foreign key constraints in the generated schema.",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "no-foreign-keys",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          },
          "verbose": {
            "type": "boolean",
            "title": "verbose",
            "description": "Show additional debug information.",
            "default": false,
            "openapi_extra": {
              "x-cli-name": "verbose",
              "x-is-argument": false,
              "x-is-flag": true,
              "x-is-option": false,
              "x-required": false
            }
          }
        },
        "type": "object",
        "required": [
          "agint_apikey"
        ],
        "title": "SchemaginGenerateRequest"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}